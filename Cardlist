using System;
using System.Collections.Generic;
using System.Linq;

public static class CartasEHabilidades
{
    // Lista de cartas pré-definidas
    public static List<Carta> CriarDeckPrincipal()
    {
        return new List<Carta>
        {
            new Carta(
                nome: "Metall",
                tipo: "Lacaio",
                elemento: "Neutro",
                energia: 0,
                poder: 0,
                resistencia: 600,
                habilidades: new List<Habilidade>
                {
                    new Habilidade
                    {
                        Nome = "Produção em Massa",
                        Tipo = "Passiva",
                        Descricao = "Você pode incluir até 4 cópias desta carta no seu deck principal.",
                        Ativar = (jogador, adversario) =>
                        {
                            Console.WriteLine("Produção em Massa: Você pode incluir até 4 cópias desta carta no seu deck principal.");
                        }
                    }
                }
            ),
            new Carta(
                nome: "Sniper Joe",
                tipo: "Lacaio",
                elemento: "Neutro",
                energia: 0,
                poder: 600,
                resistencia: 1200,
                habilidades: null
            ),
            new Carta(
                nome: "Ataque Poderoso",
                tipo: "Ação",
                elemento: "Neutro",
                energia: 3,
                poder: 0,
                resistencia: 0,
                habilidades: new List<Habilidade>
                {
                    new Habilidade
                    {
                        Nome = "Ataque Poderoso",
                        Tipo = "Ativa",
                        Descricao = "Causa 1000 de dano ao herói adversário.",
                        Ativar = (jogador, adversario) =>
                        {
                            if (adversario.HeroiAtivo != null)
                            {
                                adversario.HeroiAtivo.Resistencia -= 1000;
                                Console.WriteLine($"{adversario.HeroiAtivo.Nome} sofreu 1000 de dano!");
                            }
                        }
                    }
                }
            ),
            new Carta(
                nome: "Escudo de Energia",
                tipo: "Equipamento",
                elemento: "Neutro",
                energia: 2,
                poder: 0,
                resistencia: 0,
                habilidades: new List<Habilidade>
                {
                    new Habilidade
                    {
                        Nome = "Escudo de Energia",
                        Tipo = "Ativa",
                        Descricao = "Aumenta a resistência do herói ativo em 500.",
                        Ativar = (jogador, adversario) =>
                        {
                            if (jogador.HeroiAtivo != null)
                            {
                                jogador.HeroiAtivo.Resistencia += 500;
                                Console.WriteLine($"{jogador.HeroiAtivo.Nome} ganhou 500 de resistência!");
                            }
                        }
                    }
                }
            ),
            new Carta(
                nome: "Elebee",
                tipo: "Lacaio",
                elemento: "Raio",
                energia: 0,
                poder: 300,
                resistencia: 100,
                habilidades: new List<Habilidade>
                {
                    new Habilidade
                    {
                        Nome = "Invisível",
                        Tipo = "Passiva",
                        Descricao = "Não pode ser alvo de ataques nem habilidades do jogador adversário.",
                        Ativar = (jogador, adversario) =>
                        {
                            // A habilidade é passiva, então não precisa de lógica de ativação.
                            // A restrição de não ser alvo é implementada na lógica do jogo.
                        }
                    }
                }
            ),
            new Carta(
                nome: "Protecto",
                tipo: "Lacaio",
                elemento: "Neutro",
                energia: 0,
                poder: 0,
                resistencia: 600,
                habilidades: new List<Habilidade>
                {
                    new Habilidade
                    {
                        Nome = "Reciclagem Automática",
                        Tipo = "Passiva",
                        Descricao = "Sempre que for destruído, jogue um novo Protecto do baralho ou da pilha de sucata (se tiver).",
                        Ativar = (jogador, adversario) =>
                        {
                            // A habilidade é passiva, então não precisa de lógica de ativação.
                            // A lógica de substituição será implementada no sistema de destruição de cartas.
                        }
                    }
                }
            )
        };
    }

    // Lista de heróis pré-definidos
    public static List<Carta> CriarDeckHerois()
    {
        return new List<Carta>
        {
            new Carta(
                nome: "Mega Man",
                tipo: "Herói",
                elemento: "Neutro",
                energia: 2,
                poder: 2000,
                resistencia: 5000,
                habilidades: new List<Habilidade>
                {
                    new Habilidade
                    {
                        Nome = "Adaptação de Combate",
                        Tipo = "Passiva",
                        Descricao = "Sempre que um herói adversário é destruído, pode copiar qualquer habilidade dele. Não copiar mais de uma habilidade.",
                        Ativar = (jogador, adversario) =>
                        {
                            if (adversario.HeroisDestruídos > jogador.HeroisDestruídos) // Verifica se o adversário perdeu um herói
                            {
                                var ultimoHeroiDestruido = adversario.Sucata.LastOrDefault(c => c.Tipo == "Herói");
                                if (ultimoHeroiDestruido != null && ultimoHeroiDestruido.Habilidades != null)
                                {
                                    // Exibe as habilidades disponíveis para copiar
                                    Console.WriteLine($"Escolha uma habilidade do {ultimoHeroiDestruido.Nome} para copiar:");
                                    for (int i = 0; i < ultimoHeroiDestruido.Habilidades.Count; i++)
                                    {
                                        Console.WriteLine($"{i + 1}. {ultimoHeroiDestruido.Habilidades[i].Nome}");
                                    }

                                    // Solicita a escolha do jogador
                                    int escolha;
                                    bool escolhaValida = int.TryParse(Console.ReadLine(), out escolha);
                                    if (escolhaValida && escolha >= 1 && escolha <= ultimoHeroiDestruido.Habilidades.Count)
                                    {
                                        var habilidadeParaCopiar = ultimoHeroiDestruido.Habilidades[escolha - 1];

                                        // Verifica se a habilidade já foi copiada
                                        if (!jogador.HeroiAtivo.Habilidades.Any(h => h.Nome == habilidadeParaCopiar.Nome))
                                        {
                                            jogador.HeroiAtivo.Habilidades.Add(habilidadeParaCopiar);
                                            Console.WriteLine($"{jogador.HeroiAtivo.Nome} copiou a habilidade '{habilidadeParaCopiar.Nome}' do {ultimoHeroiDestruido.Nome}!");
                                        }
                                        else
                                        {
                                            Console.WriteLine($"{jogador.HeroiAtivo.Nome} já possui a habilidade '{habilidadeParaCopiar.Nome}'.");
                                        }
                                    }
                                    else
                                    {
                                        Console.WriteLine("Escolha inválida. Nenhuma habilidade foi copiada.");
                                    }
                                }
                            }
                        }
                    }
                }
            ),
            new Carta(
                nome: "Proto Man",
                tipo: "Herói",
                elemento: "Neutro",
                energia: 3,
                poder: 4000,
                resistencia: 2000,
                habilidades: new List<Habilidade>
                {
                    new Habilidade
                    {
                        Nome = "Escudo de Proteção",
                        Tipo = "Passiva",
                        Descricao = "Enquanto estiver na área de suporte, Proto Man pode defender o herói ativo, tomando o dano por ele.",
                        Ativar = (jogador, adversario) =>
                        {
                            if (jogador.HeroiSuporte?.Nome == "Proto Man" && jogador.HeroiAtivo != null && adversario.HeroiAtivo != null)
                            {
                                Console.WriteLine("Proto Man defendeu o herói ativo!");
                                jogador.HeroiSuporte.ReceberDano(adversario.HeroiAtivo.Poder);
                                adversario.HeroiAtivo.Poder = 0; // Zera o dano do ataque
                            }
                        }
                    }
                }
            ),
            new Carta(
                nome: "Roll",
                tipo: "Herói",
                elemento: "Neutro",
                energia: 1,
                poder: 1500,
                resistencia: 2000,
                habilidades: null
            ),
            new Carta(
                nome: "Bass",
                tipo: "Herói",
                elemento: "Neutro",
                energia: 3,
                poder: 3500,
                resistencia: 4000,
                habilidades: null
            ),
            new Carta(
                nome: "Zero",
                tipo: "Herói",
                elemento: "Neutro",
                energia: 3,
                poder: 4000,
                resistencia: 3500,
                habilidades: null
            ),
            new Carta(
                nome: "Quick Man",
                tipo: "Herói",
                elemento: "Neutro",
                energia: 1,
                poder: 1000,
                resistencia: 4000,
                habilidades: new List<Habilidade>
                {
                    new Habilidade
                    {
                        Nome = "Ataque Rápido",
                        Tipo = "Ativa",
                        Descricao = "Ativa: Custa 1 de energia. Após realizar um ataque, Quick Man pode atacar uma segunda vez (uma vez por turno).",
                        Ativar = (jogador, adversario) =>
                        {
                            if (jogador.QuickManPodeAtacar && jogador.EnergiaTotal >= 1 && jogador.QuickManJaAtacou) // Verifica se a habilidade já foi usada, se há energia suficiente e se já houve um ataque
                            {
                                Console.WriteLine("Escolha um alvo para o segundo ataque:");
                                Console.WriteLine("1. Herói Ativo");
                                Console.WriteLine("2. Herói de Suporte");
                                Console.WriteLine("3. Lacaio");

                                int escolha;
                                bool escolhaValida = int.TryParse(Console.ReadLine(), out escolha);

                                if (escolhaValida)
                                {
                                    switch (escolha)
                                    {
                                        case 1:
                                            if (adversario.HeroiAtivo != null)
                                            {
                                                adversario.HeroiAtivo.ReceberDano(jogador.HeroiAtivo.Poder);
                                                Console.WriteLine($"{jogador.HeroiAtivo.Nome} atacou {adversario.HeroiAtivo.Nome} novamente!");
                                            }
                                            break;
                                        case 2:
                                            if (adversario.HeroiSuporte != null)
                                            {
                                                adversario.HeroiSuporte.ReceberDano(jogador.HeroiAtivo.Poder);
                                                Console.WriteLine($"{jogador.HeroiAtivo.Nome} atacou {adversario.HeroiSuporte.Nome}!");
                                            }
                                            break;
                                        case 3:
                                            if (adversario.CampoSuperior.Count > 0)
                                            {
                                                Console.WriteLine("Escolha um lacaio para atacar:");
                                                for (int i = 0; i < adversario.CampoSuperior.Count; i++)
                                                {
                                                    Console.WriteLine($"{i + 1}. {adversario.CampoSuperior[i].Nome}");
                                                }

                                                int escolhaLacaio;
                                                bool escolhaLacaioValida = int.TryParse(Console.ReadLine(), out escolhaLacaio);

                                                if (escolhaLacaioValida && escolhaLacaio >= 1 && escolhaLacaio <= adversario.CampoSuperior.Count)
                                                {
                                                    var lacaioAlvo = adversario.CampoSuperior[escolhaLacaio - 1];
                                                    lacaioAlvo.ReceberDano(jogador.HeroiAtivo.Poder);
                                                    Console.WriteLine($"{jogador.HeroiAtivo.Nome} atacou {lacaioAlvo.Nome} novamente!");
                                                }
                                            }
                                            break;
                                        default:
                                            Console.WriteLine("Escolha inválida. Nenhum ataque adicional foi realizado.");
                                            break;
                                    }

                                    jogador.QuickManPodeAtacar = false; // Impede que a habilidade seja usada novamente no mesmo turno
                                    jogador.EnergiaTotal -= 1; // Gasta 1 de energia para ativar a habilidade
                                }
                                else
                                {
                                    Console.WriteLine("Escolha inválida. Nenhum ataque adicional foi realizado.");
                                }
                            }
                            else if (!jogador.QuickManPodeAtacar)
                            {
                                Console.WriteLine("Quick Man já atacou duas vezes neste turno.");
                            }
                            else if (!jogador.QuickManJaAtacou)
                            {
                                Console.WriteLine("Quick Man precisa realizar um ataque antes de usar esta habilidade.");
                            }
                            else
                            {
                                Console.WriteLine("Energia insuficiente para ativar a habilidade.");
                            }
                        }
                    }
                }
            ),
            new Carta(
                nome: "Magnet Man",
                tipo: "Herói",
                elemento: "Neutro",
                energia: 2,
                poder: 2000,
                resistencia: 4000,
                habilidades: new List<Habilidade>
                {
                    new Habilidade
                    {
                        Nome = "Troca Magnética",
                        Tipo = "Ativa",
                        Descricao = "Ativa: Custa 2 de energia. Troca a posição do herói ativo e o suporte adversário (uma vez por turno).",
                        Ativar = (jogador, adversario) =>
                        {
                            if (jogador.EnergiaTotal >= 2) // Verifica se há energia suficiente
                            {
                                if (adversario.HeroiAtivo != null && adversario.HeroiSuporte != null)
                                {
                                    // Troca as posições dos heróis adversários
                                    var temp = adversario.HeroiAtivo;
                                    adversario.HeroiAtivo = adversario.HeroiSuporte;
                                    adversario.HeroiSuporte = temp;

                                    Console.WriteLine($"Magnet Man trocou a posição de {adversario.HeroiAtivo.Nome} e {adversario.HeroiSuporte.Nome}!");
                                    jogador.EnergiaTotal -= 2; // Gasta 2 de energia
                                }
                                else
                                {
                                    Console.WriteLine("Não é possível trocar as posições. Verifique se ambos os heróis adversários estão em campo.");
                                }
                            }
                            else
                            {
                                Console.WriteLine("Energia insuficiente para ativar a habilidade.");
                            }
                        }
                    }
                }
            ),
            new Carta(
                nome: "Colonel",
                tipo: "Herói",
                elemento: "Neutro",
                energia: 3,
                poder: 2500,
                resistencia: 4000,
                habilidades: new List<Habilidade>
                {
                    new Habilidade
                    {
                        Nome = "Corte Certeiro",
                        Tipo = "Ativa",
                        Descricao = "Colonel ataca diretamente o herói ativo do oponente, ignorando Lacaios. Colonel não poderá atacar novamente neste turno.",
                        Ativar = (jogador, adversario) =>
                        {
                            if (jogador.EnergiaTotal >= 5) // Verifica se há energia suficiente
                            {
                                if (adversario.HeroiAtivo != null)
                                {
                                    // Impede que o oponente use Lacaios para defender
                                    adversario.PodeUsarLacaiosParaDefender = false;

                                    // Realiza o ataque diretamente no herói ativo
                                    int dano = jogador.HeroiAtivo.Poder;
                                    adversario.HeroiAtivo.ReceberDano(dano);
                                    Console.WriteLine($"{jogador.HeroiAtivo.Nome} usou Corte Certeiro e causou {dano} de dano diretamente em {adversario.HeroiAtivo.Nome}!");

                                    // Restaura a permissão para usar Lacaios após o ataque
                                    adversario.PodeUsarLacaiosParaDefender = true;

                                    // Impede que o Colonel ataque novamente neste turno
                                    jogador.HeroiAtivo.PodeAtacar = false;

                                    // Gasta a energia
                                    jogador.EnergiaTotal -= 5;
                                }
                                else
                                {
                                    Console.WriteLine("Não há herói ativo para atacar.");
                                }
                            }
                            else
                            {
                                Console.WriteLine("Energia insuficiente para ativar Corte Certeiro.");
                            }
                        }
                    }
                }
            )
        };
    }
}

public class Carta
{
    public string Nome { get; set; }
    public string Tipo { get; set; }
    public string Elemento { get; set; }
    public int Energia { get; set; }
    public int Poder { get; set; }
    public int Resistencia { get; set; }
    public List<Habilidade> Habilidades { get; set; }
    public bool PodeAtacar { get; set; } = true; // Propriedade para controlar se a carta pode atacar

    public Carta(string nome, string tipo, string elemento, int energia, int poder, int resistencia, List<Habilidade> habilidades)
    {
        Nome = nome;
        Tipo = tipo;
        Elemento = elemento;
        Energia = energia;
        Poder = poder;
        Resistencia = resistencia;
        Habilidades = habilidades ?? new List<Habilidade>();
    }

    public void ReceberDano(int dano)
    {
        Resistencia -= dano;
        if (Resistencia < 0)
        {
            Resistencia = 0;
        }
    }
}

public class Habilidade
{
    public string Nome { get; set; }
    public string Tipo { get; set; }
    public string Descricao { get; set; }
    public Action<Jogador, Jogador> Ativar { get; set; }
}

public class Jogador
{
    public Carta HeroiAtivo { get; set; }
    public Carta HeroiSuporte { get; set; }
    public List<Carta> Mao { get; set; }
    public List<Carta> CampoSuperior { get; set; }
    public List<Carta> Sucata { get; set; }
    public int EnergiaTotal { get; set; }
    public bool QuickManPodeAtacar { get; set; }
    public bool QuickManJaAtacou { get; set; }
    public bool PodeUsarLacaiosParaDefender { get; set; } = true;
    public int HeroisDestruídos { get; set; }
}

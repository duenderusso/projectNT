using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace NTWarriors
{
    class Program
    {
        static void Main(string[] args)
        {
            Jogador jogador1 = new Jogador("Jogador 1");
            Jogador jogador2 = new Jogador("Jogador 2");

            GameManager gameManager = new GameManager(jogador1, jogador2);
            gameManager.IniciarJogo();
        }
    }

    class GameManager
    {
        public Jogador Jogador1 { get; private set; }
        public Jogador Jogador2 { get; private set; }
        public int TurnoAtual { get; private set; } = 1;
        public bool JogoAtivo { get; private set; } = true;
        public const int TurnoMaximo = 30; // Limite máximo de turnos

        public GameManager(Jogador jogador1, Jogador jogador2)
        {
            Jogador1 = jogador1;
            Jogador2 = jogador2;
        }

        public void IniciarJogo()
        {
            Console.WriteLine("O jogo começou!");
            while (JogoAtivo)
            {
                Jogador jogadorAtual = (TurnoAtual % 2 == 1) ? Jogador1 : Jogador2;
                Jogador jogadorAdversario = (TurnoAtual % 2 == 1) ? Jogador2 : Jogador1;

                Console.Clear();
                Console.WriteLine($"Turno {TurnoAtual} - {jogadorAtual.Nome}'s vez!");

                // Regenera energia e aumenta energia máxima
                jogadorAtual.RecuperarEnergia();
                jogadorAtual.AumentarEnergiaMaxima();

                // Verifica se o jogador pode comprar uma carta
                if (jogadorAtual.DeckPrincipal.Count > 0)
                {
                    jogadorAtual.ComprarCarta(jogadorAtual.DeckPrincipal);
                }

                // Verifica heróis no campo
                jogadorAtual.VerificarHeroisNoCampo();
                jogadorAtual.MostrarCampo();
                jogadorAdversario.MostrarCampo();

                // Opção de trocar heróis
                if (jogadorAtual.Herois.Count >= 2)
                {
                    Console.WriteLine("\nDeseja trocar a posição do herói ativo e do herói de suporte? (s/n)");
                    string trocar = Console.ReadLine();
                    if (trocar.ToLower() == "s")
                    {
                        jogadorAtual.TrocarHerois();
                    }
                }

                // Realizar ação (atacar, jogar carta ou desistir)
                RealizarAcao(jogadorAtual, jogadorAdversario);

                // Verifica se o adversário perdeu
                if (jogadorAdversario.VerificarDerrota())
                {
                    Console.WriteLine($"{jogadorAdversario.Nome} perdeu o jogo!");
                    Console.WriteLine($"{jogadorAtual.Nome} venceu em {TurnoAtual} turnos!");
                    JogoAtivo = false;
                    break;
                }

                // Verifica se o jogo atingiu o limite de turnos
                if (TurnoAtual >= TurnoMaximo)
                {
                    Console.WriteLine("O jogo terminou em empate!");
                    JogoAtivo = false;
                    break;
                }

                TurnoAtual++;
                Thread.Sleep(2000); // Pausa para melhorar a experiência
            }

            Console.WriteLine("Fim do jogo!");
        }

        private void RealizarAcao(Jogador jogadorAtual, Jogador jogadorAdversario)
        {
            Console.WriteLine("\nO que você quer fazer?");
            Console.WriteLine("1. Atacar");
            Console.WriteLine("2. Jogar uma carta");
            Console.WriteLine("3. Desistir");
            Console.Write("Escolha: ");
            string escolha = Console.ReadLine();

            if (escolha == "1")
            {
                jogadorAtual.Atacar(jogadorAdversario);
            }
            else if (escolha == "2")
            {
                JogarCarta(jogadorAtual);
            }
            else if (escolha == "3")
            {
                Console.WriteLine($"{jogadorAtual.Nome} desistiu do jogo!");
                Console.WriteLine($"{jogadorAdversario.Nome} venceu!");
                JogoAtivo = false; // Encerra o jogo
            }
            else
            {
                Console.WriteLine("Escolha inválida. Passando a vez.");
            }
        }

        private void JogarCarta(Jogador jogadorAtual)
        {
            if (jogadorAtual.Mao.Count == 0)
            {
                Console.WriteLine("Você não tem cartas na mão para jogar.");
                return;
            }

            Console.WriteLine("Escolha uma carta para jogar:");
            for (int i = 0; i < jogadorAtual.Mao.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {jogadorAtual.Mao[i].Nome}");
            }

            int cartaEscolhida;
            bool entradaValida = int.TryParse(Console.ReadLine(), out cartaEscolhida);
            if (entradaValida && cartaEscolhida >= 1 && cartaEscolhida <= jogadorAtual.Mao.Count)
            {
                jogadorAtual.JogarCarta(jogadorAtual.Mao[cartaEscolhida - 1]);
            }
            else
            {
                Console.WriteLine("Escolha inválida.");
            }
        }
    }

    class Jogador
    {
        public string Nome { get; private set; }
        public int Energia { get; private set; } = 0;
        public int EnergiaMaxima { get; private set; } = 1;
        public List<Heroi> Herois { get; private set; } = new List<Heroi>();
        public List<Carta> DeckPrincipal { get; private set; } = new List<Carta>();
        public List<Carta> Mao { get; private set; } = new List<Carta>();

        public Jogador(string nome)
        {
            Nome = nome;
            // Inicializa heróis e deck (exemplo)
            Herois.Add(new Heroi("Herói 1"));
            Herois.Add(new Heroi("Herói 2"));
            Herois.Add(new Heroi("Herói 3"));
            for (int i = 0; i < 20; i++) DeckPrincipal.Add(new Carta($"Carta {i + 1}"));
        }

        public void RecuperarEnergia()
        {
            Energia = EnergiaMaxima;
        }

        public void AumentarEnergiaMaxima()
        {
            if (EnergiaMaxima < 10) EnergiaMaxima++;
        }

        public void ComprarCarta(List<Carta> deck)
        {
            if (deck.Count > 0)
            {
                Mao.Add(deck[0]);
                deck.RemoveAt(0);
            }
        }

        public void VerificarHeroisNoCampo()
        {
            Herois.RemoveAll(heroi => heroi.Derrotado);
        }

        public bool VerificarDerrota()
        {
            // Perde se tiver 3 heróis derrotados
            int heroisDerrotados = Herois.Count(heroi => heroi.Derrotado);
            return heroisDerrotados >= 3;
        }

        public void MostrarCampo()
        {
            Console.WriteLine($"\n{Nome}'s Campo:");
            foreach (var heroi in Herois)
            {
                Console.WriteLine($"{heroi.Nome} - {(heroi.Derrotado ? "Derrotado" : "Ativo")}");
            }
        }

        public void TrocarHerois()
        {
            if (Herois.Count >= 2)
            {
                var temp = Herois[0];
                Herois[0] = Herois[1];
                Herois[1] = temp;
                Console.WriteLine("Heróis trocados!");
            }
        }

        public void Atacar(Jogador adversario)
        {
            // Lógica de ataque (exemplo simplificado)
            Console.WriteLine($"{Nome} atacou {adversario.Nome}!");
            if (adversario.Herois.Count > 0)
            {
                adversario.Herois[0].Derrotado = true;
                Console.WriteLine($"{adversario.Herois[0].Nome} foi derrotado!");
            }
        }

        public void JogarCarta(Carta carta)
        {
            Console.WriteLine($"{Nome} jogou a carta {carta.Nome}!");
            Mao.Remove(carta);
        }
    }

    class Heroi
    {
        public string Nome { get; private set; }
        public bool Derrotado { get; set; } = false;

        public Heroi(string nome)
        {
            Nome = nome;
        }
    }

    class Carta
    {
        public string Nome { get; private set; }

        public Carta(string nome)
        {
            Nome = nome;
        }
    }
}

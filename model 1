using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace NT Warriors
{
    class Carta
    {
        public string Nome { get; set; }
        public string Tipo { get; set; }
        public string Elemento { get; set; }
        public int Energia { get; set; }
        public int Poder { get; set; }
        public int Resistencia { get; set; }
        public List<Habilidade> Habilidades { get; set; }

        public Carta(string nome, string tipo, string elemento, int energia, int poder, int resistencia, List<Habilidade> habilidades)
        {
            Nome = nome;
            Tipo = tipo;
            Elemento = elemento;
            Energia = energia;
            Poder = poder;
            Resistencia = resistencia;
            Habilidades = habilidades ?? new List<Habilidade>();
        }
    }

    class Habilidade
    {
        public string Nome { get; set; }
        public string Tipo { get; set; }
        public string Descricao { get; set; }
        public Action<Jogador, Jogador> Ativar { get; set; }
    }

    class Jogador
    {
        public string Nome { get; set; }
        public int EnergiaTotal { get; set; }
        public List<Carta> Mao { get; set; }
        public List<Carta> DeckPrincipal { get; set; }
        public List<Carta> DeckHerois { get; set; }
        public List<Carta> Campo { get; set; }
        public static List<Carta> Sucata { get; set; } = new List<Carta>();

        public Jogador(string nome, List<Carta> deckPrincipal, List<Carta> deckHerois)
        {
            Nome = nome;
            EnergiaTotal = 10;
            Mao = new List<Carta>();
            DeckPrincipal = deckPrincipal;
            DeckHerois = deckHerois;
            Campo = new List<Carta>();

            EmbaralharDeck(DeckPrincipal);
            EmbaralharDeck(DeckHerois);

            for (int i = 0; i < 3; i++)
            {
                ComprarCarta(DeckPrincipal);
                ComprarCarta(DeckHerois);
            }
        }

        private void EmbaralharDeck(List<Carta> deck)
        {
            Random rng = new Random();
            for (int i = deck.Count - 1; i > 0; i--)
            {
                int j = rng.Next(i + 1);
                (deck[i], deck[j]) = (deck[j], deck[i]);
            }
        }

        public void ComprarCarta(List<Carta> deck)
        {
            if (deck.Count > 0)
            {
                Mao.Add(deck[0]);
                deck.RemoveAt(0);
            }
        }

        public void JogarCarta(int indice)
        {
            if (indice >= 0 && indice < Mao.Count && EnergiaTotal >= Mao[indice].Energia)
            {
                Carta carta = Mao[indice];
                Mao.RemoveAt(indice);
                Campo.Add(carta);
                EnergiaTotal -= carta.Energia;
            }
        }

        public void DerrotarCarta(Carta carta)
        {
            if (Campo.Contains(carta))
            {
                Campo.Remove(carta);
                Sucata.Add(carta);
                Console.WriteLine($"{carta.Nome} foi enviado para a Sucata!");
            }
        }

        public void MostrarMao()
        {
            Console.WriteLine($"Mão de {Nome}: {string.Join(", ", Mao.Select(c => c.Nome))}");
        }

        public void MostrarCampo()
        {
            Console.WriteLine($"Campo de {Nome}: {string.Join(", ", Campo.Select(c => c.Nome))}");
        }

        public static void MostrarSucata()
        {
            Console.WriteLine($"Sucata: {string.Join(", ", Sucata.Select(c => c.Nome))}");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            List<Carta> deck1 = new List<Carta> { new Carta("Mega Man", "Herói", "Neutro", 5, 3000, 2500, null) };
            List<Carta> deck2 = new List<Carta> { new Carta("Proto Man", "Herói", "Fogo", 4, 2500, 2000, null) };
            
            Jogador jogador1 = new Jogador("Jogador 1", deck1, deck1);
            Jogador jogador2 = new Jogador("Jogador 2", deck2, deck2);
            
            bool jogoAtivo = true;
            int turno = 1;

            while (jogoAtivo)
            {
                Jogador jogadorAtual = (turno % 2 == 1) ? jogador1 : jogador2;
                Jogador jogadorAdversario = (turno % 2 == 1) ? jogador2 : jogador1;

                Console.WriteLine($"\n--- Turno {turno}: {jogadorAtual.Nome} ---");
                jogadorAtual.MostrarMao();
                jogadorAtual.MostrarCampo();
                Console.WriteLine($"Campo de {jogadorAdversario.Nome}: {string.Join(", ", jogadorAdversario.Campo.Select(c => c.Nome))}");

                Console.Write("Escolha uma carta para jogar (índice ou -1 para passar): ");
                if (int.TryParse(Console.ReadLine(), out int indice) && indice >= 0 && indice < jogadorAtual.Mao.Count)
                {
                    jogadorAtual.JogarCarta(indice);
                }
                else
                {
                    Console.WriteLine("Passando turno...");
                }

                jogadorAtual.ComprarCarta(jogadorAtual.DeckPrincipal);
                Jogador.MostrarSucata();

                turno++;
                Thread.Sleep(1000); // Pausa de 1 segundo entre os turnos
            }
        }
    }
}

}
